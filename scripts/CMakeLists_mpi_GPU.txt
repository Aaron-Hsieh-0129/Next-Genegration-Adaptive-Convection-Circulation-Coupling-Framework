# Set minimum CMake version
cmake_minimum_required(VERSION 3.10)

# Ensure NVHPC compilers are used for C/C++
set(CMAKE_C_COMPILER nvc CACHE STRING "Set C compiler")
set(CMAKE_CXX_COMPILER nvc++ CACHE STRING "Set C++ compiler")
# Use gfortran for Fortran
set(CMAKE_Fortran_COMPILER gfortran CACHE STRING "Set Fortran compiler")

# Disable dependency file generation (-MF issue) for NVHPC
if(CMAKE_CXX_COMPILER_ID STREQUAL "NVHPC")
    set(CMAKE_CXX_DEPENDS "")
    set(CMAKE_C_DEPENDS "")
    set(CMAKE_DEPFILE_FLAGS_CXX "")
    set(CMAKE_DEPFILE_FLAGS_C "")
endif()

# Define project after compiler settings
project(TMIF VERSION 1.0.0 LANGUAGES CXX Fortran)

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Set HOME_DIR
set(HOME_DIR $ENV{HOME})

# Find MPI (force NVHPC OpenMPI for C/C++)
set(ENV{OMPI_CC} nvc)
set(ENV{OMPI_CXX} nvc++)
set(ENV{OMPI_FC} gfortran) # Set Fortran compiler for MPI, though not used in Fortran
find_package(MPI REQUIRED)

# Set MPI compilers only for C/C++ (Fortran compiler remains gfortran)
set(CMAKE_C_COMPILER ${MPI_C_COMPILER})
set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})

# Set compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 ${MPI_CXX_COMPILE_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MPI_C_COMPILE_FLAGS}")
set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp -fdefault-real-8") # Adjusted to gfortran flags
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_CXX_LINK_FLAGS}")

# Set RPATH usage
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Option to enable or disable PETSc
option(USE_PETSC "Enable PETSc support" OFF)

if(USE_PETSC)
    # Set root location to find PETSc's pkg-config
    set(PETSC $ENV{PETSC_DIR})
    set(ENV{PKG_CONFIG_PATH} ${PETSC}/lib/pkgconfig)

    # Find PETSc using pkg-config
    find_package(PkgConfig REQUIRED)
    pkg_search_module(PETSC REQUIRED IMPORTED_TARGET PETSc)
endif()

# Enable exporting compile commands
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
set(AMGX_INCLUDE_DIR "/home/Aaron/amgx_install/include")
set(AMGX_LIB_DIR "/home/Aaron/amgx_install/lib")
set(CUDA_INCLUDE_DIR "/home/Aaron/nvhpc/Linux_x86_64/21.3/cuda/include")
set(CUDA_LIB_DIR "/home/Aaron/nvhpc/Linux_x86_64/21.3/cuda/lib64")
set(GCC9_LIB_DIR "/home/Aaron/gcc9/lib64")
set(GCC9_LIB32_DIR "/home/Aaron/gcc9/lib")  # Added for completeness

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/2DVVM/include
    ${HOME_DIR}/local/include
    ${MPI_INCLUDE_PATH}
    ${AMGX_INCLUDE_DIR}
    ${CUDA_INCLUDE_DIR}
)

# Add PETSc include directories only if PETSc is enabled
if(USE_PETSC)
    include_directories(${HOME_DIR}/local/petsc/include)
endif()

# Source files (C++ files)
file(GLOB_RECURSE SRC_CXX CSSWM/src/*.cpp CSSWM/src/*.hpp 2DVVM/src/*.cpp 2DVVM/src/*.hpp src/*.cpp src/*.hpp)

# Delete the main.cpp files from the 2DVVM and CSSWM directories
list(REMOVE_ITEM SRC_CXX ${CMAKE_CURRENT_SOURCE_DIR}/2DVVM/src/main.cpp)
list(REMOVE_ITEM SRC_CXX ${CMAKE_CURRENT_SOURCE_DIR}/CSSWM/src/main.cpp)

# Fortran source files
file(GLOB_RECURSE SRC_Fortran 2DVVM/src/*.f90)

# Create a shared library for Fortran code
if(SRC_Fortran)
    add_library(fortran_lib SHARED ${SRC_Fortran})
    set_target_properties(fortran_lib PROPERTIES OUTPUT_NAME "fortran_lib")
endif()

# Add the executable target
add_executable(TMIF ${SRC_CXX})

# Link Fortran library and runtime to the executable
if(SRC_Fortran)
    target_link_libraries(TMIF PRIVATE fortran_lib gfortran)
    add_dependencies(TMIF fortran_lib)
endif()

# Link MPI libraries (C/C++ only)
target_link_libraries(TMIF PRIVATE ${MPI_CXX_LIBRARIES})


# Link PETSc libraries if PETSc is enabled
if(USE_PETSC)
    target_link_libraries(TMIF PRIVATE PkgConfig::PETSC)
endif()

# Find and link other libraries
find_library(libncPath netcdf "${HOME_DIR}/local/lib")
find_library(libncxxPath netcdf_c++4 "${HOME_DIR}/local/lib")
find_library(libpetscPath petsc "${HOME_DIR}/local/petsc/lib")
find_library(AMGXSH_LIBRARY amgxsh ${AMGX_LIB_DIR})
find_library(CUDART_LIBRARY cudart ${CUDA_LIB_DIR})

set_target_properties(TMIF PROPERTIES
    LINK_FLAGS "-Wl,-rpath,${GCC9_LIB_DIR} -Wl,-rpath,${GCC9_LIB32_DIR} -Wl,-rpath,${CUDA_LIB_DIR} -Wl,-rpath,${AMGX_LIB_DIR}"
)

target_link_libraries(TMIF PRIVATE 
    ${libncPath} 
    ${libncxxPath} 
    ${AMGXSH_LIBRARY}
    ${CUDART_LIBRARY}
    stdc++
)

# Link PETSc libraries conditionally
if(USE_PETSC)
    target_link_libraries(TMIF PRIVATE ${libncPath} ${libncxxPath} ${libpetscPath})
endif()

# CPack settings
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
